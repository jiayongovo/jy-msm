#pragma once
#include <array>
#include <cstdint>

namespace at {
namespace native {

template <>
struct NTTHyperParam<VESTA_Fr_G1> {
  constexpr static const std::array<uint32_t, 8> group_gen = {
      0x619a153d,
      0x02021cf6,
      0x4980b78e,
      0x9e8c2697,
      0xc87a4666,
      0x2a676d5c,
      0xa7a17876,
      0x15d8049d};
  constexpr static const std::array<uint32_t, 8> group_gen_inverse = {
      0x9e65eac8,
      0xfbdfd7aa,
      0xe50025fb,
      0x0cd4d654,
      0x3785b99a,
      0xd59892a3,
      0x585e8789,
      0x2a27fb62};

  constexpr static const std::size_t S = 32;

  constexpr static const std::array<uint32_t, (S + 1)* 8>
      forward_roots_of_unity = {
          0xfffffffd, 0x34786d38, 0xe41914ad, 0x992c350b, 0xffffffff,
          0xffffffff, 0xffffffff, 0x3fffffff, 0x00000004, 0x64b4c3b4,
          0x2533e46e, 0x891a63f0, 0x00000000, 0x00000000, 0x00000000,
          0x00000000, 0x14debe82, 0xe9d5e762, 0xb194b8fa, 0x75357d63,
          0x1a870fb9, 0x4cc6bf53, 0x826fd45c, 0x1e575782, 0x64374374,
          0x6d7f7876, 0x7328a736, 0xb02b6de2, 0x37a813c5, 0x12edd98f,
          0x2a49f0e7, 0x3781ae4a, 0x661ef087, 0x919cdd87, 0x97d7ca44,
          0x91ca113f, 0x3c5d50ca, 0x3badd5e0, 0xf7fd2b8a, 0x13bca07c,
          0x436466c2, 0x91c60317, 0x982a3204, 0xa1b66855, 0x93433eb3,
          0xb2d086f1, 0x099a9db5, 0x3f107a3e, 0xfe1e821d, 0x638c50db,
          0xbe92ad3d, 0xb0961359, 0xe16716df, 0x7df980ff, 0x9b4ecc13,
          0x1018c535, 0xc72f16ff, 0xc8baf102, 0x30c0fdd0, 0x2af54352,
          0x67a535db, 0xc1ad28f0, 0x47bfaa35, 0x27a459a7, 0xb291adfd,
          0x1415db10, 0x7bdf3965, 0x21fa4aa6, 0xaa5fe828, 0x979ae7d5,
          0xdd2b7d7e, 0x1a685f9f, 0xdfc0d0f3, 0x012f4495, 0x613070c3,
          0x09735bc3, 0x2bd1b73a, 0x9c33a100, 0xd1e3d8da, 0x2de8c154,
          0x4d7fc240, 0x3cc4b4f2, 0xca98a8b1, 0xd5f08177, 0x9f1c6afa,
          0xd70d1ea5, 0x28fbfb22, 0x26e2b03c, 0x169c0c43, 0x4a44ca64,
          0xa139bdea, 0x2538682e, 0x542f427a, 0x49d78d6b, 0xb8e33f15,
          0x055c3cde, 0xa2e5385b, 0xb66e4538, 0x97778251, 0xe54bde20,
          0xb05e9525, 0xd660e125, 0xe74d40cb, 0x341ff150, 0x9f3a0b18,
          0xa764d853, 0xbed0f9e9, 0x357dddca, 0xc99d676c, 0xe23a298e,
          0x13d9ba90, 0x3d4f8efd, 0x9b32268f, 0xaaaa6774, 0x5b5d7ccf,
          0x64388573, 0xf3796b88, 0xa84427d2, 0x0d911f3f, 0x36cb1b46,
          0x0da4aaa7, 0x1da8574e, 0xa7b552cb, 0x4c5e2cc3, 0x699bbb8f,
          0x86e2ca0e, 0xee95119c, 0x1f144001, 0xe663ba65, 0x1875a84e,
          0x7a6f9b33, 0xf7694725, 0xe441b507, 0xf769a6f3, 0x4bb872d3,
          0x1a72d2ae, 0x519b6e2e, 0x78d36469, 0x25ac8260, 0xa2db159c,
          0x58336553, 0x08b70b64, 0x6aa58848, 0x07485f64, 0xdaf827a8,
          0x206f9519, 0x71568682, 0x88325c4f, 0xcab6eb78, 0x9d50ded9,
          0x4f0f87d5, 0x1b87d7e1, 0x18e11d76, 0x03157842, 0x83ea0efa,
          0x52c167fc, 0x2aa0a613, 0x18a24872, 0x29237038, 0x0aac312c,
          0x808a8118, 0x0109462e, 0xce867e7e, 0x231cb06b, 0x63745777,
          0x14f3fc88, 0xb616fb28, 0x1076d41c, 0x42c3897f, 0x9de6f8ca,
          0x4b202deb, 0x542570ce, 0xdcc46158, 0x084cdcea, 0x299467f6,
          0x287055b2, 0x109c45b4, 0x6dfc6867, 0x402a0a16, 0x5f4a1f27,
          0x01d3188f, 0xbde33059, 0x62d0e535, 0x23c22b79, 0x651feb81,
          0xf9d86940, 0xaea352a4, 0x050d7d1c, 0xd393d50d, 0x5ce1552d,
          0xc6367ef9, 0x1245da9b, 0xb01f309b, 0x353a1ec7, 0xcba76146,
          0x2b0e4bb2, 0xa4823985, 0x283c4a34, 0x804ad0fe, 0x2f17e60e,
          0xf3952b88, 0x67670e91, 0xe90dc44b, 0x0f0948bb, 0xfa9eca49,
          0x24f48206, 0x27ade893, 0x220c2504, 0x8167d867, 0x11999de9,
          0xba6c26ce, 0x4bb4982c, 0x391ac02a, 0xb4fbe7f0, 0x45a3817c,
          0x13dfffd2, 0x4806f372, 0xfae333d6, 0x32052f68, 0x1586c88b,
          0x79142b95, 0xfae0783f, 0x858e86ad, 0x18c3212d, 0xe63b9e91,
          0xc86f5f58, 0xff1bbcc3, 0x6260d177, 0x279dabc4, 0x97b8fa22,
          0x2e7c2736, 0x1babfcfd, 0xe741b178, 0xdd5e604b, 0x304b6fbd,
          0xa7e46b94, 0x10e5bf3e, 0x796d50bf, 0xe385fb65, 0x379fbf64,
          0xcc71b699, 0xd4ee3f3e, 0xa483738b, 0x13a88248, 0x8ec8bacb,
          0x4e8c44a2, 0xd392f074, 0x30628f05, 0xc7651c08, 0xf3bd724f,
          0x9efda23b, 0x9cb7c4f7, 0x2f0464e7, 0x76ae5023, 0x7554c186,
          0x3d891c33, 0xbad6dbf0, 0xa28db849, 0xd3b539df, 0x9083cd03,
          0x9dc8448e, 0xfba6b9ca, 0x7b89c6da, 0x3ec92874};

  constexpr static const std::array<uint32_t, (S + 1)* 8>
      inverse_roots_of_unity = {
          0xfffffffd, 0x34786d38, 0xe41914ad, 0x992c350b, 0xffffffff,
          0xffffffff, 0xffffffff, 0x3fffffff, 0x00000004, 0x64b4c3b4,
          0x2533e46e, 0x891a63f0, 0x00000000, 0x00000000, 0x00000000,
          0x00000000, 0xeb21417f, 0xaf57498a, 0x57b84020, 0xad111b98,
          0xe578f046, 0xb33940ac, 0x7d902ba3, 0x21a8a87d, 0x035949c8,
          0xe633f8bb, 0x703f86af, 0x218023c7, 0x6c9e7197, 0x792cf89e,
          0xdf560f7b, 0x20c7f44d, 0xf2205343, 0x9f91fe66, 0xce5ad423,
          0xfeca29bc, 0xc531877d, 0x1a2dc566, 0xda06fd17, 0x14cc054c,
          0xaff08680, 0xed015766, 0x6ff5e5ec, 0x2b8b67f0, 0x8a9f75e0,
          0xfc1988e6, 0xd4f161d3, 0x3cf52321, 0xba470234, 0xb45bc2aa,
          0x90e6fcd7, 0x088caab9, 0xf8e62078, 0x3d875ad5, 0x2487ec24,
          0x334afd13, 0x994471db, 0x5ce10b11, 0x56c5a334, 0x27cfdb43,
          0x655ec9ca, 0x653e9ee6, 0x59ee1688, 0x270994be, 0x7f4200a0,
          0x3f4b8966, 0xac8c9a8b, 0x99fe6ed9, 0x5a833bdc, 0xfabcff5a,
          0x30dea533, 0x2b90f107, 0xb7b55bc5, 0x0cd7507e, 0xe6c2c902,
          0xa263e797, 0xccf172f8, 0x18ace1b6, 0x8027ab61, 0x241db4ca,
          0x9908f633, 0x65a48ffd, 0x2f034ad4, 0x8be3d33c, 0x5d93cf27,
          0xe8ea04f2, 0xa2bde0a2, 0x1218a277, 0x723ff480, 0x2e8d8b45,
          0x9c38e955, 0xd1b4d044, 0x76ef358f, 0x73dde418, 0x3506a7bb,
          0x0448616b, 0x97eb8684, 0x4e9f8af7, 0x106841c4, 0xe192715a,
          0x8d0c2902, 0x4e29f77e, 0xa49e457c, 0x2f5e372e, 0x3b3feafb,
          0xed9acaac, 0xe6fd3e72, 0x3199ce25, 0xd8f43737, 0xbd99288d,
          0x2eff660d, 0x0d541492, 0x103e86ff, 0xbead0341, 0x9f3132d0,
          0x94b6bae1, 0x764060e7, 0x42c64966, 0xb6a8d6a6, 0x247879d7,
          0xc8b793e2, 0x5db80c23, 0x8f23e8dc, 0x0ee0414e, 0x0d9920fc,
          0x00493dba, 0xb78ff358, 0x32460ec6, 0xaeb15b15, 0x16455dab,
          0x90bcb45e, 0xbdd15963, 0x6a164e05, 0xbe7b3b2b, 0x7f478856,
          0x17ccf494, 0x711e794f, 0x76c96791, 0x1f65413a, 0x92a56408,
          0x620a60dd, 0xd0495ba4, 0x627103cc, 0x25b6de6c, 0xc35fbc24,
          0x10802190, 0x4126bd02, 0x7a4d3a76, 0x6de64119, 0xe4bc421e,
          0xef08db88, 0x0b69c128, 0x0d94140e, 0x89990be1, 0x69a21f4e,
          0x23081711, 0xb949c6e6, 0xbf9492ad, 0xb41f50d3, 0x3c7978e8,
          0x5903edd6, 0x5197df49, 0xa9fbc7cc, 0x4cd4032c, 0xf8ab0371,
          0xe4f26df7, 0xacd46e73, 0x31ea15f1, 0x860e0248, 0x502d922a,
          0x164e94ae, 0x9aede8c2, 0x910138a4, 0xc5413491, 0x6c406bcf,
          0x05cfd8e6, 0xd17e4718, 0xf960847d, 0x1df001c0, 0xc563ae31,
          0x02fd177d, 0xcab75697, 0x9b76cb44, 0x37341575, 0x310cf5ad,
          0x23490ab3, 0x9f93e6a2, 0x9adf0770, 0xe7d4945e, 0x4c1c4bb1,
          0xd1eac3eb, 0x35c451a6, 0xe5d18518, 0x281d7e00, 0x0ff85914,
          0x1c54c47b, 0xd49c7cf0, 0x42f0f80b, 0x0abb7a66, 0x0c48c6ec,
          0xb901fd70, 0x5201c47c, 0x0cb56518, 0x9a2a69e4, 0x27baf510,
          0x04f91ba8, 0x00e13050, 0x2a2fb121, 0x45f74cfe, 0x58f143c9,
          0x8eb66b9a, 0xdda26b6b, 0x119f4f70, 0x070b3c12, 0xb92f5667,
          0x32ed3eb2, 0xf64ac99f, 0xa79987b9, 0x645760fc, 0x9220f0a4,
          0x797419ad, 0x0b72c1b6, 0xddf80267, 0x0a69932a, 0x6ff53916,
          0xd020fa66, 0xacffbdbd, 0x0340cdd6, 0xf38bb742, 0x055bf888,
          0xbcf9e95f, 0x1c6ac32c, 0x25be8d97, 0x00571ac5, 0x6c2ab600,
          0x4363960a, 0x3262de6d, 0xef856511, 0xf5e05bc5, 0x3bbb2f06,
          0x7f4f7bc6, 0xbfa8482d, 0x2a10a3b9, 0x79a15ad3, 0x0e332ebf,
          0x72463616, 0xc039aefb, 0x02bdac2f, 0x99b36804, 0x39ae11c7,
          0xd938cab2, 0x5ada0798, 0x3116ae8e, 0x8f16455f, 0xda74de40,
          0x01d36527, 0xcb155442, 0x5cfe5f67, 0x734c4621, 0x176460c2,
          0x45214110, 0xdf810016, 0xf91068bc, 0x18047fb9};

  constexpr static const std::array<uint32_t, (S + 1)* 8> domain_size_inverse =
      {0xfffffffd, 0x34786d38, 0xe41914ad, 0x992c350b, 0xffffffff, 0xffffffff,
       0xffffffff, 0x3fffffff, 0xffffffff, 0x66d2cf12, 0xf6b306e4, 0xddb96703,
       0xffffffff, 0xffffffff, 0xffffffff, 0x3fffffff, 0x00000000, 0x00000000,
       0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x40000000,
       0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
       0x00000000, 0x20000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
       0x00000000, 0x00000000, 0x00000000, 0x10000000, 0x00000000, 0x00000000,
       0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x08000000,
       0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
       0x00000000, 0x04000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
       0x00000000, 0x00000000, 0x00000000, 0x02000000, 0x00000000, 0x00000000,
       0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x01000000,
       0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
       0x00000000, 0x00800000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
       0x00000000, 0x00000000, 0x00000000, 0x00400000, 0x00000000, 0x00000000,
       0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00200000,
       0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
       0x00000000, 0x00100000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
       0x00000000, 0x00000000, 0x00000000, 0x00080000, 0x00000000, 0x00000000,
       0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00040000,
       0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
       0x00000000, 0x00020000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
       0x00000000, 0x00000000, 0x00000000, 0x00010000, 0x00000000, 0x00000000,
       0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00008000,
       0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
       0x00000000, 0x00004000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
       0x00000000, 0x00000000, 0x00000000, 0x00002000, 0x00000000, 0x00000000,
       0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00001000,
       0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
       0x00000000, 0x00000800, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
       0x00000000, 0x00000000, 0x00000000, 0x00000400, 0x00000000, 0x00000000,
       0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000200,
       0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
       0x00000000, 0x00000100, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
       0x00000000, 0x00000000, 0x00000000, 0x00000080, 0x00000000, 0x00000000,
       0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000040,
       0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
       0x00000000, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
       0x00000000, 0x00000000, 0x00000000, 0x00000010, 0x00000000, 0x00000000,
       0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000008,
       0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
       0x00000000, 0x00000004, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
       0x00000000, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00000000,
       0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000001};
};

template <>
struct NTTHyperParam<PALLAS_Fr_G1> {
  constexpr static const std::array<uint32_t, 8> group_gen = {
      0x619a153d,
      0x02021cf6,
      0x4980b78e,
      0x9e8c2697,
      0xc87a4666,
      0x2a676d5c,
      0xa7a17876,
      0x15d8049d};
  constexpr static const std::array<uint32_t, 8> group_gen_inverse = {
      0x9e65eac8,
      0xfbdfd7aa,
      0xe50025fb,
      0x0cd4d654,
      0x3785b99a,
      0xd59892a3,
      0x585e8789,
      0x2a27fb62};

  constexpr static const std::size_t S = 32;

  constexpr static const std::array<uint32_t, (S + 1)* 8>
      forward_roots_of_unity = {
          0xfffffffd, 0x5b2b3e9c, 0xe3420567, 0x992c350b, 0xffffffff,
          0xffffffff, 0xffffffff, 0x3fffffff, 0x00000004, 0x311bac84,
          0x2652a376, 0x891a63f0, 0x00000000, 0x00000000, 0x00000000,
          0x00000000, 0x50411c8d, 0x9952b397, 0x5b45ab59, 0xc2e1c20d,
          0x79e2cf8b, 0x9f5fe7ea, 0x9a0b0416, 0x3fb87491, 0xf7f50a19,
          0xb221f07c, 0x70ed76f3, 0x0c9f8cbd, 0xa2e42558, 0xddf25119,
          0x0c4df3f6, 0x08e53df7, 0x64ac7194, 0xab891650, 0x53bd7200,
          0x454a773d, 0x8950947d, 0x9456c50d, 0xb96ec59b, 0x3cb937c9,
          0x650476f8, 0xe8086b31, 0x303b24bc, 0xb63b2005, 0x17a3ffb0,
          0xb25166eb, 0x00255739, 0x230328d9, 0x3f074990, 0x163b3c5d,
          0x6c96d06f, 0x578682b4, 0xea9d1021, 0xacf59d52, 0x3a56fc2a,
          0x3698f737, 0xfa111bf4, 0x3e08cb31, 0xef61b93e, 0x5aa2fb76,
          0x07dd00ea, 0x1d74a629, 0x97350e45, 0x10d24a45, 0x3bd29625,
          0x8f8c40cb, 0x226b05e2, 0x47c325a9, 0xa6d1c7d0, 0xb0540d11,
          0xa96c274c, 0x241041d6, 0xf3eb06fa, 0xdfd41e53, 0x989558d9,
          0xec6d8d6f, 0x808d6660, 0xb8d47ab8, 0x99eb3c55, 0x3c543909,
          0x879503d8, 0x63b1d5a6, 0xc1052ef0, 0xe22c26ab, 0xd4b42543,
          0x52ffda3f, 0x3940f1b6, 0x22f540e9, 0xb6019cf5, 0xf81410ad,
          0x5e4bbf3c, 0x7f463824, 0x46eaa942, 0xd5096637, 0x47e04f09,
          0x1d5453f4, 0xdffd19d8, 0x748e7d26, 0xdba49993, 0x95dd3f10,
          0x13222d29, 0x06c1e604, 0x1a7d1844, 0x3db5c110, 0x71e0ca6d,
          0x5fb32ae2, 0x6826298b, 0xf48011d5, 0xe9ab487e, 0xe109abb9,
          0x01a58c18, 0x3f9125be, 0xf4818062, 0xa38e3e19, 0x621c0220,
          0x559f9e92, 0x0fbbe419, 0x639d1af9, 0x9920ccf4, 0x1d44ced6,
          0x3999d9d1, 0x87763243, 0x05ebc958, 0xfbca68e1, 0xac00952c,
          0xf4c8224c, 0xdf668653, 0x2f321721, 0xb402fb40, 0x9f95087b,
          0x1c4e41b0, 0x69101bbf, 0xed938731, 0x2f1974df, 0xef38a035,
          0x32a411df, 0xf8f99854, 0x502f832d, 0x2f0fe1aa, 0x52f3b914,
          0x173d33a9, 0xd865cc5a, 0xc6f84281, 0x39f13afe, 0x3ae794b1,
          0x7701cb1e, 0xbb63749b, 0x9ead68a5, 0x99b3f107, 0xb0f90d92,
          0xd761cb45, 0x15cad977, 0x90b1d6e1, 0x67a44f6c, 0x0787c915,
          0x16c499dc, 0xd3059563, 0xb8a8f0c1, 0x1792007b, 0x0523f4b5,
          0xce776c88, 0xccb26769, 0x7b263e0a, 0xb8a64c4e, 0x8a676d4c,
          0xc3b8d16b, 0x4dc9bef2, 0x33236b99, 0x5e07d030, 0xcc23a55a,
          0xfea81102, 0xc8c96363, 0x2d46ac62, 0xa6b51bdc, 0x9f30bce1,
          0x1a99f314, 0xfbee061a, 0x6a05fe3f, 0x5dc1d87b, 0x915eb435,
          0xfc5a21b2, 0x01141911, 0x190e04bf, 0x001bf5e2, 0xcd319478,
          0xc01654eb, 0xbd673478, 0x8dd099e5, 0x42cd8fb7, 0x9589c6ab,
          0xb5500acf, 0x0acf2bd1, 0x18e70991, 0xfe195b5b, 0xe8c4aa09,
          0x6ed57aba, 0x5285e191, 0xa085cdd4, 0xf0957a90, 0x2d59eef0,
          0x9e73bfab, 0xabbbd799, 0xb411a883, 0x813ae194, 0x1f33be33,
          0x867e01b9, 0x92042ae6, 0x342391b3, 0x95b88431, 0x584e581c,
          0xc4f3afd0, 0x77344057, 0x782b587b, 0x20015c52, 0x5c6903bf,
          0x1a06ebc4, 0x11a6f844, 0x60e1e8e0, 0x6251b0b6, 0xb331d32f,
          0x064041eb, 0xf211bd1e, 0xc73a7ddf, 0x0e4fa253, 0x36925b05,
          0x476b6628, 0xae79f7c8, 0xb17411f4, 0xd36f4a2a, 0xaa9d0bfb,
          0xb085dc9e, 0x029dfb82, 0x060eced6, 0xf298d125, 0x0eb41b93,
          0x921d0ff2, 0x4e46fc33, 0x24652dc7, 0xdb6412b3, 0x08aee078,
          0xffeba333, 0xf31f4f7d, 0xcde6642c, 0xc75e3d69, 0x345898c4,
          0xdb39e31b, 0x940b7ad0, 0x39eaef71, 0x8c9942de, 0x21807742,
          0x21b60494, 0xcc495789, 0xb2efbee2, 0xac2e5d27, 0x7f2db056,
          0x0b79fa89};

  constexpr static const std::array<uint32_t, (S + 1)* 8>
      inverse_roots_of_unity = {
          0xfffffffd, 0x5b2b3e9c, 0xe3420567, 0x992c350b, 0xffffffff,
          0xffffffff, 0xffffffff, 0x3fffffff, 0x00000004, 0x311bac84,
          0x2652a376, 0x891a63f0, 0x00000000, 0x00000000, 0x00000000,
          0x00000000, 0xafbee374, 0xf2f43789, 0xae4efd83, 0x5f64d6ee,
          0x861d3074, 0x60a01815, 0x65f4fbe9, 0x00478b6e, 0xf0a5b0e5,
          0xd23873d5, 0xe5968f0e, 0x2b522cd8, 0x3919f01a, 0x1a7c767c,
          0x1c71baff, 0x1877b00e, 0x8f07725e, 0x9c99d2f9, 0x63e64ed0,
          0xa5a8e56f, 0xad1907d4, 0x5bde7d8c, 0xf8bb3507, 0x1839f546,
          0x6d80bcb9, 0x8bfea7cd, 0x94ae70b3, 0xb1d7554e, 0x88468d7a,
          0x88782d20, 0xd671e816, 0x352938b7, 0x44af06de, 0x97cb4514,
          0xb176ab4e, 0x0c3108df, 0xd8ae23bb, 0xeebbecdf, 0x542d2cd5,
          0x3d22244d, 0x7bc921f6, 0x564b2b32, 0x44bc8f48, 0x3d433579,
          0xb48fa15c, 0x82ff6f4a, 0x96b7b9f1, 0x2ff6af51, 0x0030605a,
          0x0940888d, 0x2a49d764, 0x44c675d3, 0x3cd180ae, 0x95042171,
          0xed528c02, 0x059d6129, 0xd2ad115f, 0x3a1bf632, 0x0663939d,
          0xb2283acb, 0x4de45ba8, 0x1a99f763, 0xb0310962, 0x38bf3db8,
          0x513e4a4a, 0x5720ee91, 0x4c68a15b, 0x226d0374, 0xa3c83d3c,
          0x8cb88876, 0x75dd1468, 0x179fc93d, 0x957a8247, 0x5d93a3f7,
          0x63857295, 0x80a81d1f, 0xe24a02b7, 0xc6c696e9, 0x5d516fe2,
          0x0326c0b1, 0x763f9c5d, 0xd3a8ad9f, 0x3cb01495, 0x870f37b4,
          0xde5a18da, 0x96893315, 0x7f0ed3b0, 0x156e3e6d, 0x81284775,
          0x9c84bdcf, 0x38e53f83, 0x33369712, 0x5bf17538, 0xac970113,
          0x6b4f2a74, 0x3c231143, 0x69f5f87b, 0xdfe57229, 0xd70993b1,
          0x19f5d293, 0x780c5339, 0xdbc66fcb, 0x02c99479, 0x0d8064a7,
          0x1770e0fe, 0x6a5854c4, 0x2bed3ae9, 0xe368681c, 0x3db2d46a,
          0x27f7f6b5, 0xd21189df, 0x16b540cf, 0x4563e020, 0x47ccec77,
          0xebc2b816, 0x119b26e3, 0xf8e183b4, 0xaed7d83b, 0xfeaa3d1b,
          0x1fc5d601, 0xaf9472c7, 0xbb71b426, 0x880ef684, 0x3a4c85a6,
          0xe80ca342, 0x9edaf018, 0x59d4c59b, 0x35c86974, 0x39c613f2,
          0x2d1cd359, 0x7adff7dd, 0xa74afe70, 0xa6519478, 0xed4b3166,
          0x88661f71, 0x3301dae6, 0x48aaf3f8, 0xbf77594f, 0x4c09b2bc,
          0xf962581c, 0x3dc6b1d6, 0x9edd9f4c, 0x7b9c21c7, 0x0ac09c99,
          0xff815435, 0xeea86d0a, 0x33774f61, 0x3e82efe6, 0x12bd1c6d,
          0x3d76869e, 0x6c708988, 0x1b0bab21, 0x07804e04, 0x13d00b98,
          0x1bfa70fd, 0xde52cd35, 0xf08dafd6, 0xf08499fd, 0xdf5bf5e8,
          0x1ab7133d, 0xe191382a, 0x78d4de6a, 0x6b406379, 0x41911324,
          0x5af50829, 0x7595a575, 0xd893623c, 0x2b8c65d7, 0x66a1d816,
          0x18b39c02, 0x4696a7a6, 0x3d310021, 0xc39fb309, 0x5a46979b,
          0xf3662567, 0x10a909e2, 0x5a79fe4d, 0xbb46ba27, 0x67f45c8a,
          0xb78f9dc5, 0xe74dbd52, 0x194a5257, 0x25c5d688, 0x0bcc6503,
          0x52ceb49e, 0xd288bf4d, 0x6b33a37d, 0xbbcfe233, 0xc6315838,
          0x444e8e6d, 0xa4557edb, 0x02c7dce6, 0x2a7da976, 0x5fdffb11,
          0xaf9683c8, 0x5460c0d0, 0x33a148d8, 0x9b7d2698, 0x867dc31b,
          0x2d782f20, 0x8dc37c2c, 0xc537eae7, 0x02f63696, 0x0422a990,
          0xb2b498b3, 0x4fbbf679, 0x2402d4bc, 0x22bfb73b, 0xd568866f,
          0x51c974f5, 0x8f652521, 0xe69eb7a4, 0x6296509c, 0xd78107c6,
          0x89c56e33, 0x1e175b9d, 0xf5ecd31b, 0xf49c886d, 0x934df55c,
          0x486c02cc, 0xddbf35b3, 0xbc7708ff, 0x0f53da8c, 0x3240dc2e,
          0x6ea9cbc2, 0x9f2de71b, 0x8a9ceba2, 0xa92b999d, 0x1253fb65,
          0x252d04a3, 0x575fb508, 0x31b18dd7, 0x23d22e85, 0xb990773d,
          0x03f3c012, 0x4ece919a, 0xaa3ba50b, 0x2c9ac8b9, 0x434d9efa,
          0x364d5dfa};

  constexpr static const std::array<uint32_t, (S + 1)* 8> domain_size_inverse =
      {0xfffffffd, 0x5b2b3e9c, 0xe3420567, 0x992c350b, 0xffffffff, 0xffffffff,
       0xffffffff, 0x3fffffff, 0xffffffff, 0x73b914de, 0xf66b5722, 0xddb96703,
       0xffffffff, 0xffffffff, 0xffffffff, 0x3fffffff, 0x00000000, 0x00000000,
       0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x40000000,
       0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
       0x00000000, 0x20000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
       0x00000000, 0x00000000, 0x00000000, 0x10000000, 0x00000000, 0x00000000,
       0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x08000000,
       0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
       0x00000000, 0x04000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
       0x00000000, 0x00000000, 0x00000000, 0x02000000, 0x00000000, 0x00000000,
       0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x01000000,
       0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
       0x00000000, 0x00800000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
       0x00000000, 0x00000000, 0x00000000, 0x00400000, 0x00000000, 0x00000000,
       0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00200000,
       0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
       0x00000000, 0x00100000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
       0x00000000, 0x00000000, 0x00000000, 0x00080000, 0x00000000, 0x00000000,
       0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00040000,
       0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
       0x00000000, 0x00020000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
       0x00000000, 0x00000000, 0x00000000, 0x00010000, 0x00000000, 0x00000000,
       0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00008000,
       0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
       0x00000000, 0x00004000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
       0x00000000, 0x00000000, 0x00000000, 0x00002000, 0x00000000, 0x00000000,
       0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00001000,
       0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
       0x00000000, 0x00000800, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
       0x00000000, 0x00000000, 0x00000000, 0x00000400, 0x00000000, 0x00000000,
       0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000200,
       0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
       0x00000000, 0x00000100, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
       0x00000000, 0x00000000, 0x00000000, 0x00000080, 0x00000000, 0x00000000,
       0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000040,
       0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
       0x00000000, 0x00000020, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
       0x00000000, 0x00000000, 0x00000000, 0x00000010, 0x00000000, 0x00000000,
       0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000008,
       0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
       0x00000000, 0x00000004, 0x00000000, 0x00000000, 0x00000000, 0x00000000,
       0x00000000, 0x00000000, 0x00000000, 0x00000002, 0x00000000, 0x00000000,
       0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000001};
};

} // namespace native
} // namespace at
